// Generated by CoffeeScript 1.6.3
(function() {
  var Pool, TYPES, castParameter, createColumns, tds, typeDeclaration, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Pool = require('generic-pool').Pool;

  tds = require('tds');

  util = require('util');

  TYPES = require('./datatypes').TYPES;

  /*
  @ignore
  */


  castParameter = function(value, type) {
    switch (type) {
      case TYPES.VarChar:
      case TYPES.NVarChar:
      case TYPES.Char:
      case TYPES.NChar:
      case TYPES.Xml:
      case TYPES.Text:
      case TYPES.NText:
        if (typeof value !== 'string' && !(value instanceof String)) {
          value = value.toString();
        }
        break;
      case TYPES.Int:
      case TYPES.TinyInt:
      case TYPES.BigInt:
      case TYPES.SmallInt:
        if (typeof value !== 'number' && !(value instanceof Number)) {
          value = parseInt(value);
          if (isNaN(value)) {
            value = null;
          }
        }
        break;
      case TYPES.Float:
      case TYPES.Real:
      case TYPES.Decimal:
      case TYPES.Numeric:
      case TYPES.SmallMoney:
      case TYPES.Money:
        if (typeof value !== 'number' && !(value instanceof Number)) {
          value = parseFloat(value);
          if (isNaN(value)) {
            value = null;
          }
        }
        break;
      case TYPES.Bit:
        if (typeof value !== 'boolean' && !(value instanceof Boolean)) {
          value = Boolean(value);
        }
        break;
      case TYPES.DateTime:
      case TYPES.SmallDateTime:
      case TYPES.DateTimeOffset:
      case TYPES.Date:
        if (!(value instanceof Date)) {
          value = new Date(value);
        }
        break;
      case TYPES.Binary:
      case TYPES.VarBinary:
      case TYPES.Image:
        if (!(value instanceof Buffer)) {
          value = new Buffer(value.toString());
        }
    }
    return value;
  };

  /*
  @ignore
  */


  createColumns = function(meta) {
    var key, out, value;
    out = {};
    for (key in meta) {
      value = meta[key];
      out[key] = {
        name: value.name,
        size: value.length,
        type: TYPES[value.type.sqlType]
      };
    }
    return out;
  };

  /*
  @ignore
  */


  typeDeclaration = function(type) {
    switch (type) {
      case TYPES.VarChar:
      case TYPES.NVarChar:
      case TYPES.Char:
      case TYPES.NChar:
      case TYPES.Xml:
      case TYPES.Text:
      case TYPES.NText:
        return "" + type.name + " (MAX)";
      default:
        return type.name;
    }
  };

  /*
  @ignore
  */


  module.exports = function(Connection, Transaction, Request) {
    var TDSConnection, TDSRequest, TDSTransaction, _ref, _ref1, _ref2;
    TDSConnection = (function(_super) {
      __extends(TDSConnection, _super);

      function TDSConnection() {
        _ref = TDSConnection.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      TDSConnection.prototype.pool = null;

      TDSConnection.prototype.connect = function(config, callback) {
        var cfg, cfg_pool, key, value, _ref1,
          _this = this;
        cfg = {
          userName: config.user,
          password: config.password,
          host: config.server,
          port: config.port,
          database: config.database
        };
        cfg_pool = {
          name: 'mssql',
          max: 10,
          min: 0,
          idleTimeoutMillis: 30000,
          create: function(callback) {
            var c, timeouted, tmr, _ref1;
            c = new tds.Connection(cfg);
            timeouted = false;
            tmr = setTimeout(function() {
              timeouted = true;
              c._client._socket.destroy();
              return callback(new Error("Connection timeout.", null));
            }, (_ref1 = config.timeout) != null ? _ref1 : 15000);
            return c.connect(function(err) {
              clearTimeout(tmr);
              if (timeouted) {
                return;
              }
              if (err) {
                return callback(err, null);
              }
              return callback(null, c);
            });
          },
          validate: function(c) {
            return c != null;
          },
          destroy: function(c) {
            return c != null ? c.end() : void 0;
          }
        };
        if (config.pool) {
          _ref1 = config.pool;
          for (key in _ref1) {
            value = _ref1[key];
            cfg_pool[key] = value;
          }
        }
        this.pool = Pool(cfg_pool, cfg);
        return this.pool.acquire(function(err, connection) {
          if (err && !(err instanceof Error)) {
            err = new Error(err);
          }
          _this.pool.release(connection);
          return typeof callback === "function" ? callback(err) : void 0;
        });
      };

      TDSConnection.prototype.close = function(callback) {
        var _ref1,
          _this = this;
        return (_ref1 = this.pool) != null ? _ref1.drain(function() {
          _this.pool.destroyAllNow();
          _this.pool = null;
          return typeof callback === "function" ? callback(null) : void 0;
        }) : void 0;
      };

      return TDSConnection;

    })(Connection);
    TDSTransaction = (function(_super) {
      __extends(TDSTransaction, _super);

      function TDSTransaction() {
        _ref1 = TDSTransaction.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      TDSTransaction.prototype.begin = function(callback) {
        var _this = this;
        return this.connection.pool.acquire(function(err, connection) {
          if (err) {
            return callback(err);
          }
          _this._pooledConnection = connection;
          return connection.setAutoCommit(false, callback);
        });
      };

      TDSTransaction.prototype.commit = function(callback) {
        var _this = this;
        return this._pooledConnection.commit(function(err) {
          _this.connection.pool.release(_this._pooledConnection);
          _this._pooledConnection = null;
          return callback(err);
        });
      };

      TDSTransaction.prototype.rollback = function(callback) {
        var _this = this;
        return this._pooledConnection.rollback(function(err) {
          _this.connection.pool.release(_this._pooledConnection);
          _this._pooledConnection = null;
          return callback(err);
        });
      };

      return TDSTransaction;

    })(Transaction);
    TDSRequest = (function(_super) {
      __extends(TDSRequest, _super);

      function TDSRequest() {
        _ref2 = TDSRequest.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      TDSRequest.prototype.connection = null;

      TDSRequest.prototype._acquire = function(callback) {
        if (this.transaction) {
          return this.transaction.queue(callback);
        } else {
          return this.connection.pool.acquire(callback);
        }
      };

      TDSRequest.prototype._release = function(connection) {
        if (this.transaction) {
          return this.transaction.next();
        } else {
          return this.connection.pool.release(connection);
        }
      };

      TDSRequest.prototype.query = function(command, callback) {
        var columns, error, handleOutput, input, name, output, param, paramHeaders, paramValues, recordset, recordsets, started, _ref3,
          _this = this;
        if (this.verbose && !this.nested) {
          console.log("---------- sql query ----------\n    query: " + command);
        }
        if (command.length === 0) {
          return process.nextTick(function() {
            var elapsed;
            if (this.verbose && !this.nested) {
              console.log("---------- response -----------");
              elapsed = Date.now() - started;
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
            return typeof callback === "function" ? callback(null, this.multiple || this.nested ? [] : null) : void 0;
          });
        }
        columns = null;
        recordset = null;
        recordsets = [];
        started = Date.now();
        handleOutput = false;
        error = null;
        paramHeaders = {};
        paramValues = {};
        _ref3 = this.parameters;
        for (name in _ref3) {
          param = _ref3[name];
          if (!(param.io === 1)) {
            continue;
          }
          paramHeaders[name] = {
            type: param.type.name
          };
          paramValues[name] = castParameter(param.value, param.type);
        }
        if (!this.nested) {
          input = (function() {
            var _ref4, _results;
            _ref4 = this.parameters;
            _results = [];
            for (name in _ref4) {
              param = _ref4[name];
              if (param.io === 2) {
                _results.push("@" + param.name + " " + (typeDeclaration(param.type)));
              }
            }
            return _results;
          }).call(this);
          output = (function() {
            var _ref4, _results;
            _ref4 = this.parameters;
            _results = [];
            for (name in _ref4) {
              param = _ref4[name];
              if (param.io === 2) {
                _results.push("@" + param.name + " as '" + param.name + "'");
              }
            }
            return _results;
          }).call(this);
          if (input.length) {
            command = "declare " + (input.join(',')) + ";" + command + ";";
          }
          if (output.length) {
            command += "select " + (output.join(',')) + ";";
            handleOutput = true;
          }
        }
        return this._acquire(function(err, connection) {
          var req;
          if (!err) {
            req = connection.createStatement(command, paramHeaders);
            req.on('row', function(tdsrow) {
              var col, exi, row, _i, _len, _ref4;
              row = {};
              _ref4 = tdsrow.metadata.columns;
              for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
                col = _ref4[_i];
                exi = row[col.name];
                if (exi != null) {
                  if (exi instanceof Array) {
                    exi.push(col.value);
                  } else {
                    row[col.name] = [exi, tdsrow.getValue(col.name)];
                  }
                } else {
                  row[col.name] = tdsrow.getValue(col.name);
                }
              }
              if (_this.verbose) {
                console.log(util.inspect(row));
                console.log("---------- --------------------");
              }
              return recordset.push(row);
            });
            req.on('metadata', function(metadata) {
              var row;
              row = null;
              columns = metadata.columnsByName;
              recordset = [];
              Object.defineProperty(recordset, 'columns', {
                enumerable: false,
                value: createColumns(metadata.columnsByName)
              }, _this.nested);
              return recordsets.push(recordset);
            });
            req.on('done', function(res) {
              var elapsed, last, _ref4, _ref5;
              if (!_this.nested) {
                if (handleOutput) {
                  last = (_ref4 = recordsets.pop()) != null ? _ref4[0] : void 0;
                  _ref5 = _this.parameters;
                  for (name in _ref5) {
                    param = _ref5[name];
                    if (!(param.io === 2)) {
                      continue;
                    }
                    param.value = last[param.name];
                    if (_this.verbose) {
                      console.log("   output: @" + param.name + ", " + param.type.name + ", " + param.value);
                    }
                  }
                }
                if (_this.verbose) {
                  if (error) {
                    console.log("    error: " + error);
                  }
                  elapsed = Date.now() - started;
                  console.log(" duration: " + elapsed + "ms");
                  console.log("---------- completed ----------");
                }
              }
              _this._release(connection);
              return typeof callback === "function" ? callback(error, _this.multiple || _this.nested ? recordsets : recordsets[0]) : void 0;
            });
            req.on('error', function(err) {
              return error = err;
            });
            return req.execute(paramValues);
          } else {
            if (connection) {
              _this._release(connection);
            }
            return typeof callback === "function" ? callback(err) : void 0;
          }
        });
      };

      TDSRequest.prototype.execute = function(procedure, callback) {
        var cmd, name, param, spp, started, _ref3,
          _this = this;
        if (this.verbose) {
          console.log("---------- sql execute --------\n     proc: " + procedure);
        }
        started = Date.now();
        cmd = "declare " + (['@__return int'].concat((function() {
          var _ref3, _results;
          _ref3 = this.parameters;
          _results = [];
          for (name in _ref3) {
            param = _ref3[name];
            if (param.io === 2) {
              _results.push("@" + param.name + " " + (typeDeclaration(param.type)));
            }
          }
          return _results;
        }).call(this)).join(', ')) + ";";
        cmd += "exec @__return = " + procedure + " ";
        spp = [];
        _ref3 = this.parameters;
        for (name in _ref3) {
          param = _ref3[name];
          if (param.io === 2) {
            spp.push("@" + param.name + "=@" + param.name + " output");
          } else {
            if (this.verbose) {
              console.log("    input: @" + param.name + ", " + param.type.name + ", " + param.value);
            }
            spp.push("@" + param.name + "=@" + param.name);
          }
        }
        cmd += "" + (spp.join(', ')) + ";";
        cmd += "select " + (['@__return as \'__return\''].concat((function() {
          var _ref4, _results;
          _ref4 = this.parameters;
          _results = [];
          for (name in _ref4) {
            param = _ref4[name];
            if (param.io === 2) {
              _results.push("@" + param.name + " as '" + param.name + "'");
            }
          }
          return _results;
        }).call(this)).join(', ')) + ";";
        if (this.verbose) {
          console.log("---------- response -----------");
        }
        this.nested = true;
        return TDSRequest.prototype.query.call(this, cmd, function(err, recordsets) {
          var elapsed, last, returnValue, _ref4, _ref5;
          _this.nested = false;
          if (err) {
            if (_this.verbose) {
              elapsed = Date.now() - started;
              console.log("    error: " + err);
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
            return typeof callback === "function" ? callback(err) : void 0;
          } else {
            last = (_ref4 = recordsets.pop()) != null ? _ref4[0] : void 0;
            if (last && (last.__return != null)) {
              returnValue = last.__return;
              _ref5 = _this.parameters;
              for (name in _ref5) {
                param = _ref5[name];
                if (!(param.io === 2)) {
                  continue;
                }
                param.value = last[param.name];
                if (_this.verbose) {
                  console.log("   output: @" + param.name + ", " + param.type.name + ", " + param.value);
                }
              }
            }
            if (_this.verbose) {
              elapsed = Date.now() - started;
              console.log("   return: " + returnValue);
              console.log(" duration: " + elapsed + "ms");
              console.log("---------- completed ----------");
            }
            recordsets.returnValue = returnValue;
            return typeof callback === "function" ? callback(null, recordsets, returnValue) : void 0;
          }
        });
      };

      TDSRequest.prototype.cancel = function() {
        /*
        			Cancel currently executed request.
        */

        throw new Error("Request canceling is not implemented by TDS driver.");
      };

      return TDSRequest;

    })(Request);
    return {
      Connection: TDSConnection,
      Transaction: TDSTransaction,
      Request: TDSRequest
    };
  };

}).call(this);
