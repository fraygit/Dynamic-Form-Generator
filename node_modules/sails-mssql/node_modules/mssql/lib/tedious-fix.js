// Generated by CoffeeScript 1.6.3
(function() {
  var MAX, NULL, iconv;

  iconv = require('iconv-lite');

  NULL = (1 << 16) - 1;

  MAX = (1 << 16) - 1;

  /*
  @ignore
  */


  module.exports = function(tedious) {
    tedious.TYPES.Text.writeParameterData = function(buffer, parameter) {
      var ex, length, valueBuffer, _ref;
      try {
        valueBuffer = iconv.encode(parameter.value, (_ref = parameter.codepage) != null ? _ref : 'ascii');
      } catch (_error) {
        ex = _error;
        valueBuffer = iconv.encode(parameter.value, 'ascii');
      }
      if (parameter.length) {
        length = parameter.length;
      } else if (parameter.value != null) {
        length = valueBuffer.length;
      } else {
        length = -1;
      }
      buffer.writeUInt8(tedious.TYPES.Text.id);
      buffer.writeInt32LE(length);
      buffer.writeBuffer(new Buffer([0x00, 0x00, 0x00, 0x00, 0x00]));
      if (parameter.value != null) {
        buffer.writeInt32LE(length);
        return buffer.writeBuffer(valueBuffer);
      } else {
        return buffer.writeInt32LE(length);
      }
    };
    tedious.TYPES.VarChar.writeParameterData = function(buffer, parameter) {
      var ex, length, valueBuffer, _ref;
      try {
        valueBuffer = iconv.encode(parameter.value, (_ref = parameter.codepage) != null ? _ref : 'ascii');
      } catch (_error) {
        ex = _error;
        valueBuffer = iconv.encode(parameter.value, 'ascii');
      }
      if (parameter.length) {
        length = parameter.length;
      } else if (parameter.value != null) {
        length = valueBuffer.length;
      } else {
        length = this.maximumLength;
      }
      buffer.writeUInt8(this.id);
      if (length <= this.maximumLength) {
        buffer.writeUInt16LE(this.maximumLength);
      } else {
        buffer.writeUInt16LE(MAX);
      }
      buffer.writeBuffer(new Buffer([0x00, 0x00, 0x00, 0x00, 0x00]));
      if (parameter.value != null) {
        if (length <= this.maximumLength) {
          buffer.writeUInt16LE(length);
          return buffer.writeBuffer(valueBuffer);
        } else {
          buffer.writeUInt64LE(length);
          buffer.writeUInt32LE(length);
          buffer.writeBuffer(valueBuffer);
          return buffer.writeUInt32LE(0);
        }
      } else {
        return buffer.writeUInt16LE(NULL);
      }
    };
    return tedious.TYPES.BigInt.writeParameterData = function(buffer, parameter) {
      buffer.writeUInt8(tedious.TYPES.IntN.id);
      buffer.writeUInt8(8);
      if (parameter.value != null) {
        buffer.writeUInt8(8);
        if (parseInt(parameter.value) > 0x100000000) {
          buffer.writeUInt32LE(parseInt(parameter.value) % 0x100000000);
        } else {
          buffer.writeInt32LE(parseInt(parameter.value) % 0x100000000);
        }
        return buffer.writeInt32LE(Math.floor(parseInt(parameter.value) / 0x100000000));
      } else {
        return buffer.writeUInt8(0);
      }
    };
  };

}).call(this);
